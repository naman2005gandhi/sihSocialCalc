{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victus\\\\Desktop\\\\spreadsheet-clone\\\\frontend\\\\src\\\\components\\\\Spreadsheet.js\",\n  _s = $RefreshSig$();\n// src/components/Spreadsheet.js\nimport React, { useState, useEffect } from 'react';\nimport Grid from './Grid';\nimport Toolbar from './Toolbar';\nimport FormulaBar from './FormulaBar';\nimport io from 'socket.io-client';\n\n// Connect to the Socket.io server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000');\nconst Spreadsheet = () => {\n  _s();\n  const [cells, setCells] = useState(createInitialCells());\n  const [activeCell, setActiveCell] = useState(null);\n  const [cellValue, setCellValue] = useState('');\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Initialize a 10x10 grid\n  function createInitialCells() {\n    const rows = 10;\n    const cols = 10;\n    return Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => ({\n      value: '',\n      bold: false,\n      italic: false,\n      underline: false\n    })));\n  }\n  useEffect(() => {\n    // Listen for updates from the server\n    socket.on('updateCell', data => {\n      const {\n        row,\n        col,\n        value\n      } = data;\n      updateCellState(row, col, value);\n    });\n\n    // Clean up on component unmount\n    return () => {\n      socket.off('updateCell');\n    };\n  }, [activeCell, cells]);\n  const updateCellState = (row, col, value) => {\n    const updatedCells = [...cells];\n    updatedCells[row][col] = {\n      ...updatedCells[row][col],\n      value\n    };\n    setHistory([...history, cells]); // Save current state to history\n    setCells(updatedCells);\n    setRedoStack([]); // Clear the redo stack on any new change\n  };\n\n  // Handle cell change\n  const handleCellChange = (row, col, value) => {\n    socket.emit('editCell', {\n      row,\n      col,\n      value\n    });\n    updateCellState(row, col, value);\n  };\n\n  // Handle formula change from the formula bar\n  const handleFormulaChange = formula => {\n    if (activeCell) {\n      handleCellChange(activeCell.row, activeCell.col, formula);\n    }\n  };\n\n  // Undo function\n  const handleUndo = () => {\n    if (history.length > 0) {\n      const previousState = history.pop();\n      setRedoStack([cells, ...redoStack]);\n      setCells(previousState);\n    }\n  };\n\n  // Redo function\n  const handleRedo = () => {\n    if (redoStack.length > 0) {\n      const nextState = redoStack.shift();\n      setHistory([...history, cells]);\n      setCells(nextState);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      onUndo: handleUndo,\n      onRedo: handleRedo,\n      onBold: () => console.log('Bold operation'),\n      onItalic: () => console.log('Italic operation'),\n      onUnderline: () => console.log('Underline operation'),\n      onClearFormatting: () => console.log('Clear formatting')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormulaBar, {\n      activeCell: activeCell,\n      onFormulaChange: handleFormulaChange,\n      cellValue: cellValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      cells: cells,\n      onCellChange: handleCellChange,\n      activeCell: activeCell,\n      setActiveCell: setActiveCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Spreadsheet, \"wv7+7VqEi5ivNcy+yc+7cnTzPLU=\");\n_c = Spreadsheet;\nexport default Spreadsheet;\nvar _c;\n$RefreshReg$(_c, \"Spreadsheet\");","map":{"version":3,"names":["React","useState","useEffect","Grid","Toolbar","FormulaBar","io","jsxDEV","_jsxDEV","socket","Spreadsheet","_s","cells","setCells","createInitialCells","activeCell","setActiveCell","cellValue","setCellValue","history","setHistory","redoStack","setRedoStack","rows","cols","Array","from","length","value","bold","italic","underline","on","data","row","col","updateCellState","off","updatedCells","handleCellChange","emit","handleFormulaChange","formula","handleUndo","previousState","pop","handleRedo","nextState","shift","children","onUndo","onRedo","onBold","console","log","onItalic","onUnderline","onClearFormatting","fileName","_jsxFileName","lineNumber","columnNumber","onFormulaChange","onCellChange","_c","$RefreshReg$"],"sources":["C:/Users/victus/Desktop/spreadsheet-clone/frontend/src/components/Spreadsheet.js"],"sourcesContent":["// src/components/Spreadsheet.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Grid from './Grid';\r\nimport Toolbar from './Toolbar';\r\nimport FormulaBar from './FormulaBar';\r\nimport io from 'socket.io-client';\r\n\r\n// Connect to the Socket.io server\r\nconst socket = io('http://localhost:3000');\r\n\r\nconst Spreadsheet = () => {\r\n  const [cells, setCells] = useState(createInitialCells());\r\n  const [activeCell, setActiveCell] = useState(null);\r\n  const [cellValue, setCellValue] = useState('');\r\n  const [history, setHistory] = useState([]);\r\n  const [redoStack, setRedoStack] = useState([]);\r\n\r\n  // Initialize a 10x10 grid\r\n  function createInitialCells() {\r\n    const rows = 10;\r\n    const cols = 10;\r\n    return Array.from({ length: rows }, () =>\r\n      Array.from({ length: cols }, () => ({\r\n        value: '',\r\n        bold: false,\r\n        italic: false,\r\n        underline: false,\r\n      }))\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Listen for updates from the server\r\n    socket.on('updateCell', (data) => {\r\n      const { row, col, value } = data;\r\n      updateCellState(row, col, value);\r\n    });\r\n\r\n    // Clean up on component unmount\r\n    return () => {\r\n      socket.off('updateCell');\r\n    };\r\n  }, [activeCell, cells]);\r\n\r\n  const updateCellState = (row, col, value) => {\r\n    const updatedCells = [...cells];\r\n    updatedCells[row][col] = {\r\n      ...updatedCells[row][col],\r\n      value,\r\n    };\r\n    setHistory([...history, cells]); // Save current state to history\r\n    setCells(updatedCells);\r\n    setRedoStack([]); // Clear the redo stack on any new change\r\n  };\r\n\r\n  // Handle cell change\r\n  const handleCellChange = (row, col, value) => {\r\n    socket.emit('editCell', { row, col, value });\r\n    updateCellState(row, col, value);\r\n  };\r\n\r\n  // Handle formula change from the formula bar\r\n  const handleFormulaChange = (formula) => {\r\n    if (activeCell) {\r\n      handleCellChange(activeCell.row, activeCell.col, formula);\r\n    }\r\n  };\r\n\r\n  // Undo function\r\n  const handleUndo = () => {\r\n    if (history.length > 0) {\r\n      const previousState = history.pop();\r\n      setRedoStack([cells, ...redoStack]);\r\n      setCells(previousState);\r\n    }\r\n  };\r\n\r\n  // Redo function\r\n  const handleRedo = () => {\r\n    if (redoStack.length > 0) {\r\n      const nextState = redoStack.shift();\r\n      setHistory([...history, cells]);\r\n      setCells(nextState);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Toolbar\r\n        onUndo={handleUndo}\r\n        onRedo={handleRedo}\r\n        onBold={() => console.log('Bold operation')}\r\n        onItalic={() => console.log('Italic operation')}\r\n        onUnderline={() => console.log('Underline operation')}\r\n        onClearFormatting={() => console.log('Clear formatting')}\r\n      />\r\n      <FormulaBar\r\n        activeCell={activeCell}\r\n        onFormulaChange={handleFormulaChange}\r\n        cellValue={cellValue}\r\n      />\r\n      <Grid\r\n        cells={cells}\r\n        onCellChange={handleCellChange}\r\n        activeCell={activeCell}\r\n        setActiveCell={setActiveCell}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spreadsheet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}