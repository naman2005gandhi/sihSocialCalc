{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victus\\\\Desktop\\\\spreadsheet-clone\\\\frontend\\\\src\\\\components\\\\Spreadsheet.js\",\n  _s = $RefreshSig$();\n// src/components/Spreadsheet.js\nimport React, { useState } from 'react';\nimport Toolbar from './Toolbar';\nimport './Spreadsheet.css'; // Include your CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spreadsheet = () => {\n  _s();\n  const [cells, setCells] = useState(createInitialCells());\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const createInitialCells = () => {\n    const rows = 20;\n    const cols = 10;\n    return Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => ({\n      value: '',\n      bold: false,\n      italic: false,\n      underline: false\n    })));\n  };\n  const handleUndo = () => {\n    if (history.length > 0) {\n      const previousState = history.pop();\n      setRedoStack([cells, ...redoStack]);\n      setCells(previousState);\n    }\n  };\n  const handleRedo = () => {\n    if (redoStack.length > 0) {\n      const nextState = redoStack.shift();\n      setHistory([...history, cells]);\n      setCells(nextState);\n    }\n  };\n  const handleBold = () => {\n    const updatedCells = [...cells];\n    // Toggle bold formatting for each selected cell\n    updatedCells[0][0].bold = !updatedCells[0][0].bold; // Example for cell (0, 0)\n    setHistory([...history, cells]);\n    setCells(updatedCells);\n    setRedoStack([]);\n  };\n  const handleItalic = () => {\n    const updatedCells = [...cells];\n    // Toggle italic formatting for each selected cell\n    updatedCells[0][0].italic = !updatedCells[0][0].italic; // Example for cell (0, 0)\n    setHistory([...history, cells]);\n    setCells(updatedCells);\n    setRedoStack([]);\n  };\n  const handleUnderline = () => {\n    const updatedCells = [...cells];\n    // Toggle underline formatting for each selected cell\n    updatedCells[0][0].underline = !updatedCells[0][0].underline; // Example for cell (0, 0)\n    setHistory([...history, cells]);\n    setCells(updatedCells);\n    setRedoStack([]);\n  };\n  const handleClearFormatting = () => {\n    const updatedCells = [...cells];\n    updatedCells.forEach(row => row.forEach(cell => {\n      cell.bold = false;\n      cell.italic = false;\n      cell.underline = false;\n    }));\n    setHistory([...history, cells]);\n    setCells(updatedCells);\n    setRedoStack([]);\n  };\n  const updateCell = (row, col, newValue) => {\n    const updatedCells = [...cells];\n    updatedCells[row][col] = {\n      ...updatedCells[row][col],\n      value: newValue\n    };\n    setHistory([...history, cells]);\n    setCells(updatedCells);\n    setRedoStack([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spreadsheet\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Google Spreadsheet Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n      onUndo: handleUndo,\n      onRedo: handleRedo,\n      onBold: handleBold,\n      onItalic: handleItalic,\n      onUnderline: handleUnderline,\n      onClearFormatting: handleClearFormatting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: cells.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            contentEditable: true,\n            style: {\n              fontWeight: cell.bold ? 'bold' : 'normal',\n              fontStyle: cell.italic ? 'italic' : 'normal',\n              textDecoration: cell.underline ? 'underline' : 'none'\n            },\n            onBlur: e => updateCell(rowIndex, colIndex, e.target.innerText),\n            children: cell.value\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Spreadsheet, \"Jn1F+J03BXp9TiyZefDh+SwAVuk=\");\n_c = Spreadsheet;\nexport default Spreadsheet;\nvar _c;\n$RefreshReg$(_c, \"Spreadsheet\");","map":{"version":3,"names":["React","useState","Toolbar","jsxDEV","_jsxDEV","Spreadsheet","_s","cells","setCells","createInitialCells","history","setHistory","redoStack","setRedoStack","rows","cols","Array","from","length","value","bold","italic","underline","handleUndo","previousState","pop","handleRedo","nextState","shift","handleBold","updatedCells","handleItalic","handleUnderline","handleClearFormatting","forEach","row","cell","updateCell","col","newValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUndo","onRedo","onBold","onItalic","onUnderline","onClearFormatting","map","rowIndex","colIndex","contentEditable","style","fontWeight","fontStyle","textDecoration","onBlur","e","target","innerText","_c","$RefreshReg$"],"sources":["C:/Users/victus/Desktop/spreadsheet-clone/frontend/src/components/Spreadsheet.js"],"sourcesContent":["// src/components/Spreadsheet.js\r\nimport React, { useState } from 'react';\r\nimport Toolbar from './Toolbar';\r\nimport './Spreadsheet.css'; // Include your CSS for styling\r\n\r\nconst Spreadsheet = () => {\r\n  const [cells, setCells] = useState(createInitialCells());\r\n  const [history, setHistory] = useState([]);\r\n  const [redoStack, setRedoStack] = useState([]);\r\n\r\n  const createInitialCells = () => {\r\n    const rows = 20;\r\n    const cols = 10;\r\n    return Array.from({ length: rows }, () =>\r\n      Array.from({ length: cols }, () => ({\r\n        value: '',\r\n        bold: false,\r\n        italic: false,\r\n        underline: false,\r\n      }))\r\n    );\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    if (history.length > 0) {\r\n      const previousState = history.pop();\r\n      setRedoStack([cells, ...redoStack]);\r\n      setCells(previousState);\r\n    }\r\n  };\r\n\r\n  const handleRedo = () => {\r\n    if (redoStack.length > 0) {\r\n      const nextState = redoStack.shift();\r\n      setHistory([...history, cells]);\r\n      setCells(nextState);\r\n    }\r\n  };\r\n\r\n  const handleBold = () => {\r\n    const updatedCells = [...cells];\r\n    // Toggle bold formatting for each selected cell\r\n    updatedCells[0][0].bold = !updatedCells[0][0].bold; // Example for cell (0, 0)\r\n    setHistory([...history, cells]);\r\n    setCells(updatedCells);\r\n    setRedoStack([]);\r\n  };\r\n\r\n  const handleItalic = () => {\r\n    const updatedCells = [...cells];\r\n    // Toggle italic formatting for each selected cell\r\n    updatedCells[0][0].italic = !updatedCells[0][0].italic; // Example for cell (0, 0)\r\n    setHistory([...history, cells]);\r\n    setCells(updatedCells);\r\n    setRedoStack([]);\r\n  };\r\n\r\n  const handleUnderline = () => {\r\n    const updatedCells = [...cells];\r\n    // Toggle underline formatting for each selected cell\r\n    updatedCells[0][0].underline = !updatedCells[0][0].underline; // Example for cell (0, 0)\r\n    setHistory([...history, cells]);\r\n    setCells(updatedCells);\r\n    setRedoStack([]);\r\n  };\r\n\r\n  const handleClearFormatting = () => {\r\n    const updatedCells = [...cells];\r\n    updatedCells.forEach(row =>\r\n      row.forEach(cell => {\r\n        cell.bold = false;\r\n        cell.italic = false;\r\n        cell.underline = false;\r\n      })\r\n    );\r\n    setHistory([...history, cells]);\r\n    setCells(updatedCells);\r\n    setRedoStack([]);\r\n  };\r\n\r\n  const updateCell = (row, col, newValue) => {\r\n    const updatedCells = [...cells];\r\n    updatedCells[row][col] = {\r\n      ...updatedCells[row][col],\r\n      value: newValue,\r\n    };\r\n    setHistory([...history, cells]);\r\n    setCells(updatedCells);\r\n    setRedoStack([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"spreadsheet\">\r\n      <h2>Google Spreadsheet Clone</h2>\r\n      <Toolbar\r\n        onUndo={handleUndo}\r\n        onRedo={handleRedo}\r\n        onBold={handleBold}\r\n        onItalic={handleItalic}\r\n        onUnderline={handleUnderline}\r\n        onClearFormatting={handleClearFormatting}\r\n      />\r\n      <table>\r\n        <tbody>\r\n          {cells.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, colIndex) => (\r\n                <td\r\n                  key={colIndex}\r\n                  contentEditable\r\n                  style={{\r\n                    fontWeight: cell.bold ? 'bold' : 'normal',\r\n                    fontStyle: cell.italic ? 'italic' : 'normal',\r\n                    textDecoration: cell.underline ? 'underline' : 'none',\r\n                  }}\r\n                  onBlur={(e) => updateCell(rowIndex, colIndex, e.target.innerText)}\r\n                >\r\n                  {cell.value}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spreadsheet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}