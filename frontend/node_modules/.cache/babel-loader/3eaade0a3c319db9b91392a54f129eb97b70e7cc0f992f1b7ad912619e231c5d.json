{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victus\\\\Desktop\\\\spreadsheet-clone\\\\frontend\\\\src\\\\components\\\\Spreadsheet.js\",\n  _s = $RefreshSig$();\n// src/components/Spreadsheet.js\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Grid from './Grid';\nimport Toolbar from './Toolbar';\nimport FormulaBar from './FormulaBar';\nimport io from 'socket.io-client';\n\n// Connect to the Socket.io server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000');\nconst Spreadsheet = () => {\n  _s();\n  const [cells, setCells] = useState(createInitialCells());\n  const [activeCell, setActiveCell] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Initialize a 10x10 grid\n  function createInitialCells() {\n    const rows = 100;\n    const cols = 10;\n    return Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => ({\n      value: '',\n      bold: false,\n      italic: false,\n      underline: false\n    })));\n  }\n  useEffect(() => {\n    // Listen for updates from the server\n    socket.on('updateCell', data => {\n      const {\n        row,\n        col,\n        value,\n        bold,\n        italic,\n        underline\n      } = data;\n      updateCellState(row, col, value, bold, italic, underline);\n    });\n\n    // Clean up on component unmount\n    return () => {\n      socket.off('updateCell');\n    };\n  }, [cells]);\n  const updateCellState = (row, col, value, bold = null, italic = null, underline = null) => {\n    const updatedCells = cells.map((r, rowIndex) => r.map((c, colIndex) => rowIndex === row && colIndex === col ? {\n      ...c,\n      value,\n      bold: bold !== null ? bold : c.bold,\n      italic: italic !== null ? italic : c.italic,\n      underline: underline !== null ? underline : c.underline\n    } : c));\n    setHistory([...history, cells]); // Save current state to history\n    setCells(updatedCells);\n    setRedoStack([]); // Clear the redo stack on any new change\n  };\n\n  // Handle cell change\n  const handleCellChange = useCallback((row, col, value) => {\n    socket.emit('editCell', {\n      row,\n      col,\n      value\n    });\n    updateCellState(row, col, value);\n  }, []);\n\n  // Handle formula change from the formula bar\n  const handleFormulaChange = useCallback(formula => {\n    if (activeCell) {\n      handleCellChange(activeCell.row, activeCell.col, formula);\n    }\n  }, [activeCell, handleCellChange]);\n\n  // Undo function\n  const handleUndo = useCallback(() => {\n    if (history.length > 0) {\n      const previousState = history[history.length - 1];\n      setRedoStack([cells, ...redoStack]);\n      setHistory(history.slice(0, -1));\n      setCells(previousState);\n    }\n  }, [history, cells, redoStack]);\n\n  // Redo function\n  const handleRedo = useCallback(() => {\n    if (redoStack.length > 0) {\n      const nextState = redoStack[0];\n      setHistory([...history, cells]);\n      setRedoStack(redoStack.slice(1));\n      setCells(nextState);\n    }\n  }, [redoStack, history, cells]);\n\n  // Formatting functions\n  const toggleFormatting = useCallback(formatType => {\n    if (activeCell) {\n      const {\n        row,\n        col\n      } = activeCell;\n      const updatedCells = cells.map((r, rowIndex) => r.map((c, colIndex) => rowIndex === row && colIndex === col ? {\n        ...c,\n        [formatType]: !c[formatType]\n      } : c));\n      setCells(updatedCells);\n      socket.emit('editCell', {\n        row,\n        col,\n        value: updatedCells[row][col].value,\n        [formatType]: updatedCells[row][col][formatType]\n      });\n    }\n  }, [cells, activeCell]);\n  const clearFormatting = useCallback(() => {\n    if (activeCell) {\n      const {\n        row,\n        col\n      } = activeCell;\n      const updatedCells = cells.map((r, rowIndex) => r.map((c, colIndex) => rowIndex === row && colIndex === col ? {\n        ...c,\n        bold: false,\n        italic: false,\n        underline: false\n      } : c));\n      setCells(updatedCells);\n      socket.emit('editCell', {\n        row,\n        col,\n        value: updatedCells[row][col].value,\n        bold: false,\n        italic: false,\n        underline: false\n      });\n    }\n  }, [cells, activeCell]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      onUndo: handleUndo,\n      onRedo: handleRedo,\n      onBold: () => toggleFormatting('bold'),\n      onItalic: () => toggleFormatting('italic'),\n      onUnderline: () => toggleFormatting('underline'),\n      onClearFormatting: clearFormatting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormulaBar, {\n      activeCell: activeCell,\n      onFormulaChange: handleFormulaChange,\n      cellValue: activeCell ? cells[activeCell.row][activeCell.col].value : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      cells: cells,\n      onCellChange: handleCellChange,\n      activeCell: activeCell,\n      setActiveCell: setActiveCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Spreadsheet, \"K2KpmLtnwB4lXuFBUHdA22IPEBM=\");\n_c = Spreadsheet;\nexport default Spreadsheet;\nvar _c;\n$RefreshReg$(_c, \"Spreadsheet\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Grid","Toolbar","FormulaBar","io","jsxDEV","_jsxDEV","socket","Spreadsheet","_s","cells","setCells","createInitialCells","activeCell","setActiveCell","history","setHistory","redoStack","setRedoStack","rows","cols","Array","from","length","value","bold","italic","underline","on","data","row","col","updateCellState","off","updatedCells","map","r","rowIndex","c","colIndex","handleCellChange","emit","handleFormulaChange","formula","handleUndo","previousState","slice","handleRedo","nextState","toggleFormatting","formatType","clearFormatting","children","onUndo","onRedo","onBold","onItalic","onUnderline","onClearFormatting","fileName","_jsxFileName","lineNumber","columnNumber","onFormulaChange","cellValue","onCellChange","_c","$RefreshReg$"],"sources":["C:/Users/victus/Desktop/spreadsheet-clone/frontend/src/components/Spreadsheet.js"],"sourcesContent":["// src/components/Spreadsheet.js\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport Grid from './Grid';\r\nimport Toolbar from './Toolbar';\r\nimport FormulaBar from './FormulaBar';\r\nimport io from 'socket.io-client';\r\n\r\n// Connect to the Socket.io server\r\nconst socket = io('http://localhost:3000');\r\n\r\nconst Spreadsheet = () => {\r\n  const [cells, setCells] = useState(createInitialCells());\r\n  const [activeCell, setActiveCell] = useState(null);\r\n  const [history, setHistory] = useState([]);\r\n  const [redoStack, setRedoStack] = useState([]);\r\n\r\n  // Initialize a 10x10 grid\r\n  function createInitialCells() {\r\n    const rows = 100;\r\n    const cols = 10;\r\n    return Array.from({ length: rows }, () =>\r\n      Array.from({ length: cols }, () => ({\r\n        value: '',\r\n        bold: false,\r\n        italic: false,\r\n        underline: false,\r\n      }))\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Listen for updates from the server\r\n    socket.on('updateCell', (data) => {\r\n      const { row, col, value, bold, italic, underline } = data;\r\n      updateCellState(row, col, value, bold, italic, underline);\r\n    });\r\n\r\n    // Clean up on component unmount\r\n    return () => {\r\n      socket.off('updateCell');\r\n    };\r\n  }, [cells]);\r\n\r\n  const updateCellState = (row, col, value, bold = null, italic = null, underline = null) => {\r\n    const updatedCells = cells.map((r, rowIndex) =>\r\n      r.map((c, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? {\r\n              ...c,\r\n              value,\r\n              bold: bold !== null ? bold : c.bold,\r\n              italic: italic !== null ? italic : c.italic,\r\n              underline: underline !== null ? underline : c.underline,\r\n            }\r\n          : c\r\n      )\r\n    );\r\n    setHistory([...history, cells]); // Save current state to history\r\n    setCells(updatedCells);\r\n    setRedoStack([]); // Clear the redo stack on any new change\r\n  };\r\n\r\n  // Handle cell change\r\n  const handleCellChange = useCallback((row, col, value) => {\r\n    socket.emit('editCell', { row, col, value });\r\n    updateCellState(row, col, value);\r\n  }, []);\r\n\r\n  // Handle formula change from the formula bar\r\n  const handleFormulaChange = useCallback((formula) => {\r\n    if (activeCell) {\r\n      handleCellChange(activeCell.row, activeCell.col, formula);\r\n    }\r\n  }, [activeCell, handleCellChange]);\r\n\r\n  // Undo function\r\n  const handleUndo = useCallback(() => {\r\n    if (history.length > 0) {\r\n      const previousState = history[history.length - 1];\r\n      setRedoStack([cells, ...redoStack]);\r\n      setHistory(history.slice(0, -1));\r\n      setCells(previousState);\r\n    }\r\n  }, [history, cells, redoStack]);\r\n\r\n  // Redo function\r\n  const handleRedo = useCallback(() => {\r\n    if (redoStack.length > 0) {\r\n      const nextState = redoStack[0];\r\n      setHistory([...history, cells]);\r\n      setRedoStack(redoStack.slice(1));\r\n      setCells(nextState);\r\n    }\r\n  }, [redoStack, history, cells]);\r\n\r\n  // Formatting functions\r\n  const toggleFormatting = useCallback((formatType) => {\r\n    if (activeCell) {\r\n      const { row, col } = activeCell;\r\n      const updatedCells = cells.map((r, rowIndex) =>\r\n        r.map((c, colIndex) =>\r\n          rowIndex === row && colIndex === col\r\n            ? {\r\n                ...c,\r\n                [formatType]: !c[formatType],\r\n              }\r\n            : c\r\n        )\r\n      );\r\n      setCells(updatedCells);\r\n      socket.emit('editCell', {\r\n        row,\r\n        col,\r\n        value: updatedCells[row][col].value,\r\n        [formatType]: updatedCells[row][col][formatType]\r\n      });\r\n    }\r\n  }, [cells, activeCell]);\r\n\r\n  const clearFormatting = useCallback(() => {\r\n    if (activeCell) {\r\n      const { row, col } = activeCell;\r\n      const updatedCells = cells.map((r, rowIndex) =>\r\n        r.map((c, colIndex) =>\r\n          rowIndex === row && colIndex === col\r\n            ? {\r\n                ...c,\r\n                bold: false,\r\n                italic: false,\r\n                underline: false,\r\n              }\r\n            : c\r\n        )\r\n      );\r\n      setCells(updatedCells);\r\n      socket.emit('editCell', {\r\n        row,\r\n        col,\r\n        value: updatedCells[row][col].value,\r\n        bold: false,\r\n        italic: false,\r\n        underline: false\r\n      });\r\n    }\r\n  }, [cells, activeCell]);\r\n\r\n  return (\r\n    <div>\r\n      <Toolbar\r\n        onUndo={handleUndo}\r\n        onRedo={handleRedo}\r\n        onBold={() => toggleFormatting('bold')}\r\n        onItalic={() => toggleFormatting('italic')}\r\n        onUnderline={() => toggleFormatting('underline')}\r\n        onClearFormatting={clearFormatting}\r\n      />\r\n      <FormulaBar\r\n        activeCell={activeCell}\r\n        onFormulaChange={handleFormulaChange}\r\n        cellValue={activeCell ? cells[activeCell.row][activeCell.col].value : ''}\r\n      />\r\n      <Grid\r\n        cells={cells}\r\n        onCellChange={handleCellChange}\r\n        activeCell={activeCell}\r\n        setActiveCell={setActiveCell}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spreadsheet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}